@page "/"
@page "/status"
@using Microsoft.Extensions.Hosting 
@using System.Threading
@implements IDisposable
@inject BreadcrumbState ServerState
@inject IOptions<RuntimeOptions> Opts
@inject IEnumerable<IHostedService> hostedServices

<div class="card">
    <div class="card-body">
        <ul class="summary">
            <!-- Address -->
            <li>
                Address : @Opts.Value.Urn:@Opts.Value.Port
            </li>
            <!-- Server status -->
            <li>
                Server status :
                @if (IsRunning)
                {
                    <span class="badge badge-success">Is Running</span>
                }
                else
                {
                    <div>
                        <span class="badge badge-danger">Is not running</span>
                    </div>
                    <button class="btn btn-primary" @onclick="Restart">Restart</button>
                }
            </li>
            <!-- Display Refresh DateTime -->
            <li>
                @if (LastRefreshDateTime == null)
                {
                    <span>Not been refreshed</span>
                }
                else
                {
                    <span>Last refresh time : @LastRefreshDateTime?.ToString("HH:mm:s")</span>
                }
            </li>
        </ul>
    </div>
</div>

@code {
    private bool _isDisposed = false;
    private static System.Timers.Timer _timer;
    public bool IsRunning { get; set; } = false;
    public DateTime? LastRefreshDateTime = null;
    public RuntimeHostedService _runtimeHostedService;

    private async void Restart()
    {
        _runtimeHostedService.Restart(CancellationToken.None);
        Refresh(null, null);
    }

    protected override Task OnInitializedAsync()
    {
        _runtimeHostedService = hostedServices.First(h => h.GetType().Equals(typeof(RuntimeHostedService))) as RuntimeHostedService;
        _timer = new System.Timers.Timer(5000);
        _timer.Elapsed += Refresh;
        _timer.Enabled = true;
        _timer.Start();
        ServerState.SetItems(new List<BreadcrumbItem> { new BreadcrumbItem("Status") });
        Refresh(null, null);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
        _isDisposed = true;
    }

    private async void Refresh(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (_isDisposed)
        {
            return;
        }

        try
        {
            await CheckHeartbeat();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception) { }
    }

    private async Task CheckHeartbeat()
    {
        var runtimeClient = new RuntimeClient(Opts.Value.Urn, Opts.Value.Port);
        try
        {
            await runtimeClient.HeartBeat();
            IsRunning = true;
            LastRefreshDateTime = DateTime.UtcNow;
        }
        catch
        {
            IsRunning = false;
            LastRefreshDateTime = DateTime.UtcNow;
        }
    }
}
