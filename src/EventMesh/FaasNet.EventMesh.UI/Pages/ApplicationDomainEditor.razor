@page "/vpns/{vpn}/applicationdomains/{applicationDomain}/editor"
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.UI.Shared.AsyncApi
@using FaasNet.EventMesh.UI.Shared.Layout
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent
@layout ApplicationDomainLayout

<Loader IsDisplayed="IsLoading">
    <AsyncApiEditor Vpn="@vpn" LoadingChanged="HandleLoadingChanged" @ref="Editor"></AsyncApiEditor>
</Loader>

@code {
    [Parameter] public string vpn { get; set; }
    [Parameter] public string applicationDomain { get; set; }
    private bool IsLoading { get; set; } = true;
    private AsyncApiEditor Editor { get; set; } = null;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<BulkUpdateClientAction>((act) =>
        {
            IsLoading = true;
        });
        SubscribeToAction<SearchClientsResultAction>((act) =>
        {
            var applications = act.Clients.Records.Select(c => new ApplicationViewModel
            {
                ClientId = c.Id,
                CoordinateX = c.CoordinateX,
                CoordinateY = c.CoordinateY,
                CreateDateTime = c.CreateDateTime.GetValueOrDefault(),
                Purposes = c.Purposes
            }).ToList();
            var links = BuildLinks(act);
            Editor.UpdateLinks(applications, links);
            IsLoading = false;
        });
        SubscribeToAction<SelectActiveNodeAction>((act) =>
        {
            RefreshApplications();
        });
        RefreshApplications();
    }

    private void RefreshApplications()
    {
        if (AppState.Value.SelectedNode == null) return;
        Dispatcher.Dispatch(new GetAllClientsAction(vpn) { Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
    }

    private void HandleLoadingChanged(bool isLoading)
    {
        IsLoading = isLoading;
    }

    private static ICollection<LinkViewModel> BuildLinks(SearchClientsResultAction act)
    {
        var links = new List<LinkViewModel>();
        foreach (var client in act.Clients.Records)
        {
            if (client.Targets == null || !client.Targets.Any()) continue;
            foreach (var target in client.Targets)
            {
                var toClient = act.Clients.Records.SingleOrDefault(c => c.Id == target.ClientId);
                if (toClient == null) continue;
                links.Add(new LinkViewModel
                {
                    EventId = target.EventId,
                    StartPoint = new LinkPointViewModel
                    {
                        ApplicationId = client.Id
                    },
                    EndPoint = new LinkPointViewModel
                    {
                        ApplicationId = toClient.Id
                    }
                });
            }
        }

        return links;
    }
}