@page "/vpns"
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Vpn

@inject EventMeshNodeViewModel EventMeshNodeViewModel

<PageTitle>Vpns</PageTitle>

<Section Title="Vpns">
	<Loader IsDisplayed="IsLoading">		
		<button class="btn btn-primary mb-2" @onclick="AddVpn">Add VPN</button>
		<Grid TRowData="VpnQueryResult" Result="EventMeshNodeViewModel.Vpns" @bind-Query="Filter">
			<GridColumn TRowData="VpnQueryResult" Expression="c => c.Name" Title="Identifier" Name="Name" />
			<GridColumn TRowData="VpnQueryResult" Expression="c => c.Description" Title="Description" Name="Description" />
			<GridColumn TRowData="VpnQueryResult" Expression="c => c.CreateDateTime.ToString()" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true" />
		</Grid>
	</Loader>
</Section>

<Modal Title="Add VPN" @ref=addVpnModal>
	<Body>
		<form>
			<!-- Name -->
			<div class="mb-3">
				<label class="form-label">Name</label>
				<input type="text" class="form-control" />
			</div>
			<!-- Description -->
			<div class="mb-3">
				<label class="form-label">Description</label>
				<textarea class="form-control"></textarea>
			</div>
		</form>
	</Body>
	<Footer></Footer>
</Modal>

@code {
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshVpns();
		}
	}
	public bool IsLoading { get; set; } = true;
	private Modal addVpnModal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (EventMeshNodeViewModel.IsRunning) await RefreshVpns();
		EventMeshNodeViewModel.StatusChanged += async (o, e) => await RefreshVpns();
		EventMeshNodeViewModel.SelectedNodeChanged += async (o, e) => await HandleSelectedNodeChanged();
	}

	private async Task RefreshVpns()
	{
		if (!EventMeshNodeViewModel.IsRunning) EventMeshNodeViewModel.ResetVpns();
		else 
		{
			IsLoading = true;
			await EventMeshNodeViewModel.RefreshVpns(Filter);
			IsLoading = false;
		}

		await InvokeAsync(() => StateHasChanged());
	}

	private async Task HandleSelectedNodeChanged()
	{
		EventMeshNodeViewModel.ResetVpns();
		await RefreshVpns();
	}

	private void AddVpn() {
		addVpnModal.Open();
	}
}