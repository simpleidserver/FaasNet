@page "/vpns"
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Vpn

@inject EventMeshNodeViewModel EventMeshNodeViewModel
@inject ToastService ToastService

<PageTitle>Vpns</PageTitle>

<Section Title="Vpns">
	<Loader IsDisplayed="IsLoading">		
		<button class="btn btn-primary mb-2" @onclick="AddVpn">Add VPN</button>
		<Grid TRowData="VpnQueryResult" Result="EventMeshNodeViewModel.Vpns" @bind-Query="Filter">
			<GridColumn TRowData="VpnQueryResult" Title="Identifier" Name="Name">
				@if(context.CreateDateTime == null)
				{
					<span class="newRecord"><b>NEW</b> @context.Name</span>
				}
				else
				{
					<span>@context.Name</span>
				}
			</GridColumn>
			<GridColumn TRowData="VpnQueryResult" Title="Description" Name="Description">
				@if (context.CreateDateTime == null)
				{
					<span class="newRecord">@context.Description</span>
				}
				else
				{
					<span>@context.Description</span>
				}
			</GridColumn>
			<GridColumn TRowData="VpnQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
				@if(context.CreateDateTime == null) 
				{
					<span class="newRecord">-</span>
				}
				else 
				{
					<span>@context.CreateDateTime.ToString()</span>
				}
			</GridColumn>
		</Grid>
	</Loader>
</Section>

<Modal Title="Add VPN" @ref=addVpnModal>
	<EditForm OnValidSubmit="@HandleValidSubmit" Model="addVpn">
		<DataAnnotationsValidator />
		<div class="modal-body">
			<!-- Name -->
			<div class="mb-3">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="addVpn.Name" />
				<ValidationMessage For="() => addVpn.Name"/>
			</div>
			<!-- Description -->
			<div class="mb-3">
				<label class="form-label">Description</label>
				<InputTextArea class="form-control" @bind-Value="addVpn.Description" />
				<ValidationMessage For="() => addVpn.Description" />
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
			<button type="submit" class="btn btn-primary">Add</button>
		</div>
	</EditForm>
</Modal>

@code {
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	private AddVpnViewModel addVpn = new();
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshVpns();
		}
	}
	public bool IsLoading { get; set; } = true;
	private Modal addVpnModal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (EventMeshNodeViewModel.IsRunning) await RefreshVpns();
		EventMeshNodeViewModel.StatusChanged += async (o, e) => await RefreshVpns();
		EventMeshNodeViewModel.SelectedNodeChanged += async (o, e) => await HandleSelectedNodeChanged();
	}

	private async Task RefreshVpns()
	{
		if (!EventMeshNodeViewModel.IsRunning) EventMeshNodeViewModel.ResetVpns();
		else 
		{
			IsLoading = true;
			await EventMeshNodeViewModel.RefreshVpns(Filter);
			IsLoading = false;
		}

		await InvokeAsync(() => StateHasChanged());
	}

	private async Task HandleSelectedNodeChanged()
	{
		EventMeshNodeViewModel.ResetVpns();
		await RefreshVpns();
	}

	private void AddVpn() {
		addVpn.Reset();
		addVpnModal.Open();
	}

	private void Close()
	{
		addVpnModal.Close();
	}

	private async void HandleValidSubmit() {
		var result = await this.EventMeshNodeViewModel.AddVpn(addVpn);
		addVpnModal.Close();
		if(!result.Success) {
			ToastService.AddError("VPN", $"An error occured while trying to add the VPN, Error: {Enum.GetName(typeof(AddVpnErrorStatus), result.Status.Value)}");
			await InvokeAsync(() => StateHasChanged());
			return;
		}

		ToastService.AddInfo("VPN", "VPN has been added");
		var records = EventMeshNodeViewModel.Vpns.Records.ToList();
		records.Insert(0, new VpnQueryResult { Description = addVpn.Description, Name = addVpn.Name });
		EventMeshNodeViewModel.Vpns.Records = records;
		await InvokeAsync(() => StateHasChanged());
	}
}