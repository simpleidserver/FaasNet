@page "/vpns"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Vpn
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.Vpns
@using Fluxor
@using Fluxor.Blazor.Web.Components

<PageTitle>Vpns</PageTitle>

<Section>
	<Title><span>Vpns</span></Title>
	<ChildContent>
		<Loader IsDisplayed="VpnsState.Value.IsLoading">
			<button class="btn btn-primary mb-2" @onclick="AddVpn">Add VPN</button>
			<Grid TRowData="VpnQueryResult" Result="VpnsState.Value.Vpns" @bind-Query="Filter">
				<GridColumn TRowData="VpnQueryResult" Title="Identifier" Name="Name">
					@if(context.CreateDateTime == null)
					{
						<span class="newRecord"><b>NEW</b> @context.Name</span>
					}
					else
					{
						<NavLink href="@($"/vpns/{context.Name}/editor")">@context.Name</NavLink>
					}
				</GridColumn>
				<GridColumn TRowData="VpnQueryResult" Title="Description" Name="Description">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">@context.Description</span>
					}
					else
					{
						<span>@context.Description</span>
					}
				</GridColumn>
				<GridColumn TRowData="VpnQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
					@if(context.CreateDateTime == null) 
					{
						<span class="newRecord">-</span>
					}
					else 
					{
						<span>@context.CreateDateTime.Value.ToLocalTime()</span>
					}
				</GridColumn>
			</Grid>
		</Loader>
	</ChildContent>
</Section>

<Modal Title="Add VPN" @ref=addVpnModal>
	<EditForm OnValidSubmit="@HandleValidSubmit" Model="addVpn">
		<DataAnnotationsValidator />
		<div class="modal-body">
			<!-- Name -->
			<div class="mb-3">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="addVpn.Name" />
				<ValidationMessage For="() => addVpn.Name"/>
			</div>
			<!-- Description -->
			<div class="mb-3">
				<label class="form-label">Description</label>
				<InputTextArea class="form-control" @bind-Value="addVpn.Description" />
				<ValidationMessage For="() => addVpn.Description" />
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
			<button type="submit" class="btn btn-primary">Add</button>
		</div>
	</EditForm>
</Modal>

@code {
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IState<VpnsState> VpnsState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private ToastService ToastService { get; set; } = null!;
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	private AddVpnAction addVpn = new();
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshVpns();
		}
	}
	private Modal addVpnModal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshVpns();
		});
		SubscribeToAction<AddVpnResultAction>((act) =>
		{
			addVpnModal.Close();
			ToastService.AddInfo("Vpn", "Vpn has been added");
			StateHasChanged();
		});
		SubscribeToAction<AddVpnFailureAction>((act) =>
		{
			addVpnModal.Close();
			ToastService.AddError("Vpn", act.Message);
			StateHasChanged();
		});
	}

	private void RefreshVpns()
	{
		if (AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new SearchVpnsAction { Filter = _filter, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}

	private void AddVpn() 
	{
		addVpn.Reset();
		addVpnModal.Open();
	}

	private void Close()
	{
		addVpnModal.Close();
	}

	private async void HandleValidSubmit()
	{
		addVpn.Url = AppState.Value.SelectedNode.Url;
		addVpn.Port = AppState.Value.SelectedNode.Port;
		Dispatcher.Dispatch(addVpn);
	}
}