@page "/vpns/{vpn}"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Queue
@using FaasNet.EventMesh.Client.StateMachines.Session
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.ClientSessions
@using FaasNet.EventMesh.UI.Stores.Queues
@using Fluxor
@using Fluxor.Blazor.Web.Components
@layout VpnLayout

<div>
	<Loader IsDisplayed="QueuesState.Value.IsLoading">
		<Grid TRowData="QueueQueryResult" Result="QueuesState.Value.Queues" @bind-Query="Filter">
			<GridColumn TRowData="QueueQueryResult" Title="Name" Name="QueueName" IsSortEnabled="true">
				<span>@context.QueueName</span>
			</GridColumn>
			<GridColumn TRowData="QueueQueryResult" Title="Topic Filter" Name="TopicFilter" IsSortEnabled="true">
				<span>@context.TopicFilter</span>
			</GridColumn>
			<GridColumn TRowData="QueueQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
				@if(context.CreateDateTime == null) 
				{
					<span>-</span>
				}
				else
				{					
					<span>@context.CreateDateTime.Value.ToLocalTime()</span>
				}
			</GridColumn>
		</Grid>
    </Loader>
</div>


@code {
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			RefreshQueues();
		}
	}
	[Parameter]
	public string vpn { get; set; }
	[Inject] private IState<QueuesState> QueuesState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;

	protected override async Task OnInitializedAsync() 
	{
		await base.OnInitializedAsync();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshQueues();
		});
		_filter.Comparison = new ComparisonExpression
		{
			Operator = ComparisonOperators.EQUAL,
			Key = "Vpn",
			Value = vpn
		};
	}

	private void RefreshQueues()
	{
		if (AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new SearchQueuesAction { Filter = _filter, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}
}