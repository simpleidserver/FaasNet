@page "/vpns/{vpn}/clients/{clientId}"
@page "/vpns/{vpn}/clients/{clientId}/info"
@inherits FluxorComponent
@layout ClientLayout
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.UI.Shared.Layout
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.ClientInfo
@using Fluxor
@using Fluxor.Blazor.Web.Components

<div>
    <Loader IsDisplayed="ClientInfoState.Value.IsLoading">
        @if (ClientInfoState.Value.ClientInfo != null && ClientInfoState.Value.ClientInfo.Success)
        {           
            <!-- Identifier -->
            <div class="mb-3">
                <label class="form-label">Identifier</label>
                <input type="text" class="form-control" disabled value="@ClientInfoState.Value.ClientInfo.Content.Id" />
            </div>
            <!-- VPN -->
            <div class="mb-3">
                <label class="form-label">VPN</label>
                <input type="text" class="form-control" disabled value="@ClientInfoState.Value.ClientInfo.Content.Vpn" />
            </div>
            <!-- CreateDateTime -->
            <div class="mb-3">
                <label class="form-label">Creation Datetime</label>
                <input type="text" class="form-control" disabled value="@(ClientInfoState.Value.ClientInfo.Content.CreateDateTime.GetValueOrDefault().ToLocalTime())" />
            </div>
            <!-- Purpose types -->
            <div class="mb-3">
                <label class="form-label">Purpose Types</label>
                <div>
                    @foreach (var purposeType in ClientInfoState.Value.ClientInfo.Content.Purposes)
                    {
		    	        <span class="badge text-bg-primary purposeType">@Enum.GetName(typeof(ClientPurposeTypes), purposeType)</span>
		            }
                </div>
            </div>
        }
    </Loader>
</div>


@code {
    [Parameter]
    public string clientId { get; set; }
    [Parameter]
    public string vpn { get; set; }
    [Inject] private IState<ClientInfoState> ClientInfoState { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        SubscribeToAction<SelectActiveNodeAction>((act) =>
        {
            RefreshClientInfo();
        });
        RefreshClientInfo();
    }

    private void RefreshClientInfo()
    {
        if (AppState.Value.SelectedNode == null) return;
        Dispatcher.Dispatch(new GetClientInfoAction { ClientId = clientId, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url, Vpn = vpn});
    }
}