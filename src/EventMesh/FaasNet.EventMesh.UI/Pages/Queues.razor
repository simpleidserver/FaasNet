@page "/queues"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Queue
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.Queues
@using Fluxor
@using Fluxor.Blazor.Web.Components

<PageTitle>Queues</PageTitle>

<Section>
	<Title><span>Queues</span></Title>
	<ChildContent>
		<Loader IsDisplayed="QueuesState.Value.IsLoading">
			<div>
				<button class="btn btn-primary mb-2" @onclick="AddQueue">Add Queue</button>
			</div>
			<Grid TRowData="QueueQueryResult" Result="QueuesState.Value.Queues" @bind-Query="Filter">
				<GridColumn TRowData="QueueQueryResult" Title="Name" Name="QueueName" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord"><b>NEW</b> @context.QueueName</span>
					}
					else
					{
						<span>@context.QueueName</span>
					}
				</GridColumn>
				<GridColumn TRowData="QueueQueryResult" Title="Vpn" Name="Vpn" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">@context.Vpn</span>
					}
					else
					{
						<span>@context.Vpn</span>
					}
				</GridColumn>
				<GridColumn TRowData="QueueQueryResult" Title="Topic Filter" Name="TopicFilter" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">@context.TopicFilter</span>
					}
					else
					{
						<span>@context.TopicFilter</span>
					}
				</GridColumn>
				<GridColumn TRowData="QueueQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">-</span>
					}
					else
					{
						<span>@context.CreateDateTime.Value.ToLocalTime()</span>
					}
				</GridColumn>
			</Grid>
		</Loader>
	</ChildContent>
</Section>

<Modal Title="Add Queue" @ref=addQueueModal>
	<EditForm OnValidSubmit="@HandleValidSubmit" Model="addQueue">
		<DataAnnotationsValidator />
		<div class="modal-body">
			<!-- Name -->
			<div class="mb-3">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="addQueue.Name" />
				<ValidationMessage For="() => addQueue.Name" />
			</div>
			<!-- VPN -->
			<div class="mb-3">
				<label class="form-label">VPN</label>
				<Autocomplete @bind-Content="@addQueue.Vpn" Name="selectVpn" Callback="GetVpnsByName" />
				<ValidationMessage For="() => addQueue.Vpn" />
			</div>
			<!-- Topic -->
			<div class="mb-3">
				<label class="form-label">Topic filter</label>
				<InputText class="form-control" @bind-Value="addQueue.TopicFilter" />
				<ValidationMessage For="() => addQueue.TopicFilter" />
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
			<button type="submit" class="btn btn-primary">Add</button>
		</div>
	</EditForm>
</Modal>

@code {
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IState<QueuesState> QueuesState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private ToastService ToastService { get; set; } = null!;
	[Inject] private IEventMeshService EventMeshService { get; set; } = null!;
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshQueues();
		}
	}
	private AddQueueAction addQueue = new();
	private Modal addQueueModal;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshQueues();
		});
		SubscribeToAction<AddQueueResultAction>((act) =>
		{
			addQueueModal.Close();
			ToastService.AddInfo("Queue", "Queue has been added");
			StateHasChanged();
		});
		SubscribeToAction<AddQueueFailureAction>((act) =>
		{
			addQueueModal.Close();
			ToastService.AddError("Queue", act.Message);
			StateHasChanged();
		});
	}

	private void RefreshQueues()
	{
		if(AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new SearchQueuesAction { Filter = _filter, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}

	private void AddQueue()
	{
		addQueue.Reset();
		addQueueModal.Open();
	}

	private void Close()
	{
		addQueueModal.Close();
	}

	private async void HandleValidSubmit() 
	{
		addQueue.Url = AppState.Value.SelectedNode.Url;
		addQueue.Port = AppState.Value.SelectedNode.Port;
		Dispatcher.Dispatch(addQueue);
	}

	private async Task<IEnumerable<string>> GetVpnsByName(string name)
	{
		IEnumerable<string> result = new List<string>();
		if (AppState.Value.SelectedNode == null) return result;
		result = await EventMeshService.FindVpnsByName(name, AppState.Value.SelectedNode.Url, AppState.Value.SelectedNode.Port, CancellationToken.None);
		return result;
	}
}