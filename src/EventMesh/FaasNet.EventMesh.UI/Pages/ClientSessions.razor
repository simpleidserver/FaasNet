@page "/vpns/{vpn}/clients/{clientId}/sessions"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Session
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.ClientSessions
@using Fluxor
@using Fluxor.Blazor.Web.Components
@layout ClientLayout

<div>
    <Loader IsDisplayed="ClientSessionsState.Value.IsLoading">
        <Grid TRowData="SessionQueryResult" Result="ClientSessionsState.Value.Sessions" @bind-Query="Filter">
            <GridColumn TRowData="SessionQueryResult" Title="Purpose" Name="ClientPurpose" IsSortEnabled="true">
                @Enum.GetName(typeof(ClientPurposeTypes), context.ClientPurpose)
            </GridColumn>
            <GridColumn TRowData="SessionQueryResult" Title="Queue" Name="QueueName" IsSortEnabled="true">
                @context.QueueName
            </GridColumn>
            <GridColumn TRowData="SessionQueryResult" Title="Expiration Datetime" Name="ExpirationTime" IsSortEnabled="true">
                @((new DateTime(context.ExpirationTime.Ticks)).ToLocalTime())
            </GridColumn>
            <GridColumn TRowData="SessionQueryResult" Title="Active" Name="IsActive">
                @if(context.IsValid)
                {
                    <b class="success">Valid</b>
                }
                else
                {
                    <b class="error">Expired</b>                
                }
            </GridColumn>
        </Grid>
    </Loader>
</div>


@code {
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "ExpirationTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			RefreshClientSessions();
		}
	}
    [Parameter]
    public string clientId { get; set; }
    [Parameter]
    public string vpn { get; set; }
    [Inject] private IState<ClientSessionsState> ClientSessionsState { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;

    protected override async Task OnInitializedAsync() 
    {
        await base.OnInitializedAsync();
        SubscribeToAction<SelectActiveNodeAction>((act) =>
        {
            RefreshClientSessions();
        });
    }  

    private void RefreshClientSessions() 
    {
		if(AppState.Value.SelectedNode == null) return;
        Dispatcher.Dispatch(new GetClientSessionsAction { ClientId = clientId, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url, Vpn = vpn, Filter = _filter });
    }
}