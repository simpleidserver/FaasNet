@page "/vpns/{vpn}/editor"
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent
@layout VpnLayout

<Loader IsDisplayed="IsLoading">
    <AsyncApiEditor Vpn="@vpn" Applications="Applications" LoadingChanged="HandleLoadingChanged"></AsyncApiEditor>
</Loader>

@code {
    [Parameter]
    public string vpn { get; set; }
    private ICollection<ApplicationViewModel> Applications { get; set; } = new List<ApplicationViewModel>();
    private bool IsLoading { get; set; } = true;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<BulkUpdateClientAction>((act) =>
        {
            IsLoading = true;
        });
        SubscribeToAction<SearchClientsResultAction>((act) =>
        {
            Applications = act.Clients.Records.Select(c => new ApplicationViewModel
            {
                ClientId = c.Id,
                CoordinateX = c.CoordinateX,
                CoordinateY = c.CoordinateY,
                CreateDateTime = c.CreateDateTime.GetValueOrDefault(),
                Purposes = c.Purposes
            }).ToList();
            IsLoading = false;
        });
        SubscribeToAction<SelectActiveNodeAction>((act) =>
        {
            RefreshApplications();
        });
        RefreshApplications();
    }

    private void RefreshApplications()
    {
        if (AppState.Value.SelectedNode == null) return;
        Dispatcher.Dispatch(new GetAllClientsAction(vpn) { Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
    }

    private void HandleLoadingChanged(bool isLoading)
    {
        IsLoading = isLoading;
    }
}