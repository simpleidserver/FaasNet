@page "/vpns/{vpn}/applicationdomains"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.ApplicationDomain
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Queue
@using FaasNet.EventMesh.UI.Shared.Components
@using FaasNet.EventMesh.UI.Shared.Layout
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.ApplicationDomains
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.Queues
@using Fluxor
@using Fluxor.Blazor.Web.Components
@layout VpnLayout

<PageTitle>Application domains</PageTitle>

<Section>
	<Title><span>Application domains</span></Title>
	<ChildContent>
		<Loader IsDisplayed="ApplicationDomainState.Value.IsLoading">
			<div>
				<button class="btn btn-primary mb-2" @onclick="AddQueue">Add Application domain</button>
			</div>
			<Grid TRowData="ApplicationDomainQueryResult" Result="ApplicationDomainState.Value.ApplicationDomains" @bind-Query="Filter">
				<GridColumn TRowData="ApplicationDomainQueryResult" Title="Name" Name="Name" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord"><b>NEW</b> @context.Name</span>
					}
					else
					{
						<NavLink href="@($"/vpns/{context.Vpn}/applicationdomains/{context.Name}/editor")">@context.Name</NavLink>
					}
				</GridColumn>
				<GridColumn TRowData="ApplicationDomainQueryResult" Title="Root topic" Name="RootTopic" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">@context.RootTopic</span>
					}
					else
					{
						<span>@context.RootTopic</span>
					}
				</GridColumn>
				<GridColumn TRowData="ApplicationDomainQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">-</span>
					}
					else
					{
						<span>@context.CreateDateTime.Value.ToLocalTime()</span>
					}
				</GridColumn>
				<GridColumn TRowData="ApplicationDomainQueryResult" Title="Update Datetime" Name="UpdateDateTime" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">-</span>
					}
					else
					{
						<span>@context.UpdateDateTime.Value.ToLocalTime()</span>
					}
				</GridColumn>
			</Grid>
		</Loader>
	</ChildContent>
</Section>

<Modal Title="Add Application Domain" @ref=addApplicationDomainModal>
	<EditForm OnValidSubmit="@HandleValidSubmit" Model="addApplicationDomain">
		<DataAnnotationsValidator />
		<div class="modal-body">
			<!-- Name -->
			<div class="mb-3">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="addApplicationDomain.Name" />
				<ValidationMessage For="() => addApplicationDomain.Name" />
			</div>
			<!-- VPN -->
			<div class="mb-3">
				<label class="form-label">VPN</label>
				<InputText class="form-control" @bind-Value="addApplicationDomain.Vpn" disabled />
			</div>
			<!-- Description -->
			<div class="mb-3">
				<label>Description</label>
				<InputTextArea class="form-control" @bind-Value="addApplicationDomain.Description" />
				<ValidationMessage For="() => addApplicationDomain.Description" />
			</div>
			<!-- Root topic -->
			<div class="mb-3">
				<label class="form-label">Root topic</label>
				<InputText class="form-control" @bind-Value="addApplicationDomain.RootTopic" />
				<ValidationMessage For="() => addApplicationDomain.RootTopic" />
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
			<button type="submit" class="btn btn-primary">Add</button>
		</div>
	</EditForm>
</Modal>

@code {
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IState<ApplicationDomainState> ApplicationDomainState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private ToastService ToastService { get; set; } = null!;
	[Inject] private IEventMeshService EventMeshService { get; set; } = null!;
	[Parameter] public string Vpn { get; set; }
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshApplicationDomains();
		}
	}
	private AddApplicationDomainAction addApplicationDomain = new();
	private Modal addApplicationDomainModal;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshApplicationDomains();
		});
		SubscribeToAction<AddApplicationDomainResultAction>((act) =>
		{
			addApplicationDomainModal.Close();
			ToastService.AddInfo("ApplicationDomain", "Application domain has been added");
			StateHasChanged();
		});
		SubscribeToAction<AddApplicationDomainFailureAction>((act) =>
		{
			addApplicationDomainModal.Close();
			ToastService.AddError("ApplicationDomain", act.Message);
			StateHasChanged();
		});
		this.addApplicationDomain.Vpn = Vpn;
		_filter.Comparison = new ComparisonExpression
		{
			Key = "Vpn",
			Operator = ComparisonOperators.EQUAL,
			Value = Vpn
		};
	}

	private void RefreshApplicationDomains()
	{
		if(AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new SearchApplicationDomainsAction { Filter = _filter, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}

	private void AddQueue()
	{
		addApplicationDomain.Reset();
		addApplicationDomainModal.Open();
	}

	private void Close()
	{
		addApplicationDomainModal.Close();
	}

	private async void HandleValidSubmit() 
	{
		addApplicationDomain.Url = AppState.Value.SelectedNode.Url;
		addApplicationDomain.Port = AppState.Value.SelectedNode.Port;
		Dispatcher.Dispatch(addApplicationDomain);
	}
}