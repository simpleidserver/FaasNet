@page "/vpns/{vpn}/eventdefs"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.Client.StateMachines.Queue
@using FaasNet.EventMesh.Client.StateMachines.Session
@using FaasNet.EventMesh.UI.Shared.Common
@using FaasNet.EventMesh.UI.Shared.Layout
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.ClientSessions
@using FaasNet.EventMesh.UI.Stores.EventDef
@using FaasNet.EventMesh.UI.Stores.Queues
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using FaasNet.EventMesh.UI.Shared.Components
@layout VpnLayout

<Section>	
	<Title><span>Event definitions</span></Title>
	<ChildContent>
		<Loader IsDisplayed="@EventDefState.Value.IsLoading">
			<div>
				<button class="btn btn-primary mb-2" @onclick="AddEventDef">Add Event Definition</button>
			</div>
			<EventDefs Vpn="@vpn" />
		</Loader>
	</ChildContent>
</Section>

<Modal Title="Add Event Definition" @ref=addEventDefModal>
	<div class="modal-body">
		<AddEventDef @ref="addEventDefForm" Vpn="@vpn"></AddEventDef>
	</div>
	<div class="modal-footer">
		<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
	</div>
</Modal>


@code {
	[Parameter]
	public string vpn { get; set; }
	[Inject] private IState<EventDefState> EventDefState { get; set; } = null!;
	private Modal addEventDefModal;
	private AddEventDef addEventDefForm;

	protected override async Task OnInitializedAsync() 
	{
		await base.OnInitializedAsync();
		SubscribeToAction<AddEventDefResultAction>((act) =>
		{
			addEventDefModal.Close();
			StateHasChanged();
		});
		SubscribeToAction<AddClientFailureAction>((act) =>
		{
			addEventDefModal.Close();
			StateHasChanged();
		});
	}

	private void AddEventDef()
	{
		addEventDefForm.Reset();
		addEventDefModal.Open();
	}

	private void Close()
	{
		addEventDefModal.Close();
	}
}