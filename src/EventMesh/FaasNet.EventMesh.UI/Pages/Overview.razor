@page "/"
@page "/overview"
@inherits FluxorComponent
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.PeerStates
@using FaasNet.Peer.Client.Transports
@using Fluxor
@using Fluxor.Blazor.Web.Components

<PageTitle>Overview</PageTitle>

<Section>
	<Title><span>Summary</span></Title>
	<ChildContent>
		EventMesh node is listening on <b>@AppState.Value.SelectedNode?.DisplayName</b><br />
		Status is 
		@if (AppState.Value.IsActive)
		{
			<b class="success">Active</b>
		}
		else
		{
			<b class="error">Inactive</b>
		}
		<br />
		<b>@ClientTransport.Name</b> protocol is used
	</ChildContent>
</Section>

<Section>	
	<Title><span>List of partitions</span></Title>
	<ChildContent>
		<Loader IsDisplayed="PeerStatesState.Value.IsLoading">
			<table class="table table-striped table-bordered">
				<thead>
					<tr>
						<th>Name</th>
						<th>Status</th>
						<th>Commit Index</th>
						<th>Last applied</th>
						<th>Commit snapshot index</th>
						<th>Last snapshot index</th>
					</tr>
				</thead>
				<tbody>
					@if (PeerStatesState.Value.PeerStates != null)
						@foreach (var peerState in PeerStatesState.Value.PeerStates)
						{
							<tr>
								<th>@peerState.Name</th>
								<th>@peerState.Status</th>
								<th>@peerState.CommitIndex</th>
								<th>@peerState.LastApplied</th>
								<th>@peerState.SnapshotCommitIndex</th>
								<th>@peerState.SnapshotLastApplied</th>
							</tr>
						}
				</tbody>
			</table>
		</Loader>
	</ChildContent>
</Section>

@code {
	[Inject] private IState<PeerStatesState> PeerStatesState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IClientTransport ClientTransport { get; set; } = null!;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshStates();
		});
		RefreshStates();
	}

	private void RefreshStates()
	{
		if (AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new GetPeerStatesAction { Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}
}