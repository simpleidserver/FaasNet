@page "/"
@page "/overview"

<PageTitle>Overview</PageTitle>

@inject EventMeshNodeViewModel EventMeshNodeViewModel

<Section Title="Summary">
	EventMesh node is listening on <b>@EventMeshNodeViewModel.SelectedNode.DisplayName</b><br/>
	Status is 
	@if(EventMeshNodeViewModel.IsRunning)
	{
		<b style="color: green">Active</b>
	}
	else
	{
		<b style="color: red">Inactive</b>
	}
	Last refresh time <b>@EventMeshNodeViewModel.LastRefreshTime.GetValueOrDefault()</b><br />
	<b>@EventMeshNodeViewModel.Protocol</b> protocol is used
</Section>

<Section Title="List of partitions">	
	<Loader IsDisplayed="IsLoading">		
		<table class="table table-striped table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Status</th>
					<th>Commit Index</th>
					<th>Last applied</th>
					<th>Commit snapshot index</th>
					<th>Last snapshot index</th>
				</tr>
			</thead>
			<tbody>
				@if (EventMeshNodeViewModel.PeerStates != null)
					@foreach(var peerState in EventMeshNodeViewModel.PeerStates)
					{
						<tr>
							<th>@peerState.Name</th>
							<th>@peerState.Status</th>
							<th>@peerState.CommitIndex</th>
							<th>@peerState.LastApplied</th>
							<th>@peerState.SnapshotCommitIndex</th>
							<th>@peerState.SnapshotLastApplied</th>
						</tr>
					}
			</tbody>
		</table>
	</Loader>
</Section>

@code {
	public bool IsLoading { get; set; } = true;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (EventMeshNodeViewModel.IsRunning) await RefreshStates();
		EventMeshNodeViewModel.StatusChanged += async (o, e) => await RefreshStates();
		EventMeshNodeViewModel.SelectedNodeChanged += async (o, e) => await HandleSelectedNodeChanged();
	}

	private async Task RefreshStates()
	{
		if (!EventMeshNodeViewModel.IsRunning) EventMeshNodeViewModel.ResetStates();
		else 
		{
			IsLoading = true;
			await EventMeshNodeViewModel.RefreshStates();
			IsLoading = false;
		}

		await InvokeAsync(() => StateHasChanged());
	}

	private async Task HandleSelectedNodeChanged() 
	{
		EventMeshNodeViewModel.ResetStates();
		await RefreshStates();
	}
}