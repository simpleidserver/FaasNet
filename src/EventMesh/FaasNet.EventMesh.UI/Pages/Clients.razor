@page "/clients"
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client

@inject EventMeshNodeViewModel EventMeshNodeViewModel

<PageTitle>Clients</PageTitle>

<Section Title="Clients">
	<Loader IsDisplayed="IsLoading">		
		<Grid TRowData="ClientQueryResult" Result="EventMeshNodeViewModel.Clients" @bind-Query="Filter">
			<GridColumn TRowData="ClientQueryResult" Expression="c => c.Id" Title="Identifier" Name="Id" IsSortEnabled="true" />
			<GridColumn TRowData="ClientQueryResult" Expression="c => c.Vpn" Name="Vpn" Title="VPN" />
			<GridColumn TRowData="ClientQueryResult" Name="Purposes" Title="Purpose">
				@foreach(var purposeType in context.Purposes) {
					<span class="badge text-bg-primary purposeType">@Enum.GetName(typeof(ClientPurposeTypes), purposeType)</span>
				}
			</GridColumn>
			<GridColumn TRowData="ClientQueryResult" Expression="c => c.CreateDateTime.ToString()" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true" />
		</Grid>
	</Loader>
</Section>


@code {
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshClients();
		}
	}
	public bool IsLoading { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (EventMeshNodeViewModel.IsRunning) await RefreshClients();
		EventMeshNodeViewModel.StatusChanged += async (o, e) => await RefreshClients();
		EventMeshNodeViewModel.SelectedNodeChanged += async (o, e) => await HandleSelectedNodeChanged();
	}

	private async Task RefreshClients()
	{
		if (!EventMeshNodeViewModel.IsRunning) EventMeshNodeViewModel.ResetClients();
		else 
		{
			IsLoading = true;
			await EventMeshNodeViewModel.RefreshClients(_filter);
			IsLoading = false;
		}

		await InvokeAsync(() => StateHasChanged());
	}

	private async Task HandleSelectedNodeChanged()
	{
		EventMeshNodeViewModel.ResetStates();
		await RefreshClients();
	}
}