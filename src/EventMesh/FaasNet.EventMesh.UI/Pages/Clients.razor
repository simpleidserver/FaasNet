@page "/clients"
@inherits FluxorComponent
@using FaasNet.EventMesh.Client.Messages
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components

<PageTitle>Clients</PageTitle>

<Section>
	<Title><span>Clients</span></Title>
	<ChildContent>
		<Loader IsDisplayed="ClientState.Value.IsLoading">
			<div>
				<button class="btn btn-primary mb-2" @onclick="AddClient">Add Client</button>
			</div>
			@if (newClient != null)
			{
				<div class="alert alert-success">
					Client <b>@newClient.ClientId</b> has been created with the secret <b>@newClient.ClientSecret</b>. Please copy it !
				</div>
			}
			<Grid TRowData="ClientQueryResult" Result="ClientState.Value.Clients" @bind-Query="Filter">
				<GridColumn TRowData="ClientQueryResult" Title="Identifier" Name="Id" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord"><b>NEW</b> @context.Id</span>
					}
					else
					{
						<NavLink href="@($"/vpns/{context.Vpn}/clients/{context.Id}/info")">@context.Id</NavLink>
					}
				</GridColumn>
				<GridColumn TRowData="ClientQueryResult" Name="Vpn" Title="VPN">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">@context.Vpn</span>
					}
					else
					{
						<span>@context.Vpn</span>
					}
				</GridColumn>
				<GridColumn TRowData="ClientQueryResult" Name="Purposes" Title="Purpose">
					@foreach(var purposeType in context.Purposes) {
						<span class="badge text-bg-primary purposeType">@Enum.GetName(typeof(ClientPurposeTypes), purposeType)</span>
					}
				</GridColumn>
				<GridColumn TRowData="ClientQueryResult" Title="Creation Datetime" Name="CreateDateTime" IsSortEnabled="true">
					@if (context.CreateDateTime == null)
					{
						<span class="newRecord">-</span>
					}
					else
					{
						<span>@context.CreateDateTime.Value.ToLocalTime()</span>
					}
				</GridColumn>
			</Grid>
		</Loader>
	</ChildContent>
</Section>

<Modal Title="Add Client" @ref=addClientModal>
	<EditForm OnValidSubmit="@HandleValidSubmit" Model="addClient">
		<DataAnnotationsValidator />
		<div class="modal-body">
			<!-- ClientId -->
			<div class="mb-3">
				<label class="form-label">Client Identifier</label>
				<InputText class="form-control" @bind-Value="addClient.ClientId" />
				<ValidationMessage For="() => addClient.ClientId" />
			</div>
			<!-- VPN -->
			<div class="mb-3">
				<label class="form-label">VPN</label>
				<Autocomplete @bind-Content="@addClient.Vpn" Name="selectVpn" Callback="GetVpnsByName" />
				<ValidationMessage For="() => addClient.Vpn" />
			</div>
			<!-- Purpose Types -->
			<div class="mb-3">
				<label class="form-label">Types of purpose</label>
				<select class="form-select" @bind="addClient.PurposeTypes" multiple>
					<option value="0">Publish</option>
					<option value="1">Subscribe</option>
				</select>
				<ValidationMessage For="() => addClient.PurposeTypes" />
			</div>
		</div>
		<div class="modal-footer">
			<button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
			<button type="submit" class="btn btn-primary">Add</button>
		</div>
	</EditForm>
</Modal>


@code {
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IState<ClientState> ClientState { get; set; } = null!;
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private ToastService ToastService { get; set; } = null!;
	[Inject] private IEventMeshService EventMeshService { get; set; } = null!;
	private FilterQuery _filter = new FilterQuery
	{
		SortOrder = SortOrders.DESC,
		SortBy = "CreateDateTime"
	};
	public FilterQuery Filter
	{
		get
		{
			return _filter;
		}
		set
		{
			_filter = value;
			this.RefreshClients();
		}
	}
	private Modal addClientModal;
	private AddClientAction addClient { get; set; } = new AddClientAction();
	private AddClientResult newClient { get; set; } = null;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		SubscribeToAction<SelectActiveNodeAction>((act) =>
		{
			RefreshClients();
		});
		SubscribeToAction<AddClientResultAction>((act) =>
		{
			addClientModal.Close();
			newClient = act.ClientResult;
			ToastService.AddInfo("Client", "Client has been added");
			StateHasChanged();
		});
		SubscribeToAction<AddClientFailureAction>((act) =>
		{
			addClientModal.Close();
			ToastService.AddError("Client", act.Message);
			StateHasChanged();
		});
	}

	private void RefreshClients()
	{
		if (AppState.Value.SelectedNode == null) return;
		Dispatcher.Dispatch(new SearchClientsAction { Filter = _filter, Port = AppState.Value.SelectedNode.Port, Url = AppState.Value.SelectedNode.Url });
	}

	private void AddClient() 
	{
		addClient.Reset();
		addClientModal.Open();
	}

	private void Close()
	{
		addClientModal.Close();
	}

	private void HandleValidSubmit() 
	{
		addClient.Url = AppState.Value.SelectedNode.Url;
		addClient.Port = AppState.Value.SelectedNode.Port;
		Dispatcher.Dispatch(addClient);
	}

	private async Task<IEnumerable<string>> GetVpnsByName(string name)
	{
		IEnumerable<string> result = new List<string>();
		if (AppState.Value.SelectedNode == null) return result;
		result = await EventMeshService.FindVpnsByName(name, AppState.Value.SelectedNode.Url, AppState.Value.SelectedNode.Port, CancellationToken.None);
		return result;
	}
}