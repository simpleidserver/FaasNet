@using FaasNet.EventMesh.Client.StateMachines.Client
<PropertiesPanel PanelClosed="Close" Title="Properties">
    <!-- VPN -->
    <div class="mb-3">
        <label class="form-label">Vpn</label>
        <input type="text" class="form-control" value="@Vpn" disabled />
    </div>
    <!-- From -->
    <div class="mb-3">
        <label class="form-label">From</label>
        <input type="text" class="form-control" value="@ActiveLink.StartPoint.ApplicationId" disabled />
    </div>
    <!-- To -->
    <div class="mb-3">
        <label class="form-label">To</label>
        <input type="text" class="form-control" value="@ActiveLink.EndPoint.ApplicationId" disabled />
    </div>
    @if(ActiveLink.Event != null)
    {
        <!-- JSON Schema -->
        <div class="mb-3 row" id="jsonContainer">
            <div class="col">
                <h6>JSON schema</h6>
                <div id="jsonEventDefinition"></div>
            </div>
            <div class="col">
                <h6>Sample</h6>
                <div id="sampleEventDefinition"></div>
            </div>
        </div>
    }
    <div id="actions">
        <button class="btn btn-danger" @onclick="Remove">Remove</button>
        @if(ActiveLink.Event == null)
        {
            <button class="btn btn-primary" @onclick="AddEventDefinition">Add event definition</button>
        }
    </div>
</PropertiesPanel>

@code {
    [Parameter]
    public LinkViewModel ActiveLink { get; set; } = null!;
    [Parameter] public EventCallback<bool> LinkClosed { get; set; }
    [Parameter] public EventCallback<LinkViewModel> LinkRemoved { get; set; }
    [Parameter] public string Vpn { get; set; } = string.Empty;
    [Inject] private IJSRuntime JS { get; set; } = null!;

    public async void Close()
    {
        await LinkClosed.InvokeAsync(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initEditor", "jsonEventDefinition", "{}");
            await JS.InvokeVoidAsync("initEditor", "sampleEventDefinition", "{}");
        }
    }

    private async void Remove(MouseEventArgs a)
    {
        await LinkRemoved.InvokeAsync(ActiveLink);
    }

    private async void AddEventDefinition(MouseEventArgs a)
    {

    }
}