@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.UI.Helpers
@using FaasNet.EventMesh.UI.Stores.EventDef
@using Fluxor
@using FaasNet.EventMesh.UI.Stores.App
@using Fluxor.Blazor.Web.Components
@using Microsoft.JSInterop
@inherits FluxorComponent

<PropertiesPanel PanelClosed="Close" Title="Properties">
    <Loader IsDisplayed="IsLoading">
        <!-- VPN -->
        <div class="mb-3">
            <label class="form-label">Vpn</label>
            <input type="text" class="form-control" value="@Vpn" disabled />
        </div>
        <!-- From -->
        <div class="mb-3">
            <label class="form-label">From</label>
            <input type="text" class="form-control" value="@ActiveLink.StartPoint.ApplicationId" disabled />
        </div>
        <!-- To -->
        <div class="mb-3">
            <label class="form-label">To</label>
            <input type="text" class="form-control" value="@ActiveLink.EndPoint.ApplicationId" disabled />
        </div>
        <!-- JSON Schema -->
        <div class="mb-3 row" id="jsonContainer">
            <div class="col">
                <h6>JSON schema</h6>
                <div id="jsonEventDefinition"></div>
            </div>
            <div class="col">
                <h6>Sample</h6>
                <div id="sampleEventDefinition"></div>
            </div>
        </div>
        <div id="actions">
            <button class="btn btn-danger" @onclick="Remove">Remove</button>
            <button class="btn btn-primary" @onclick="GenerateSample">Generate sample</button>
            @if (string.IsNullOrEmpty(ActiveLink.EventId))
            {
                <button class="btn btn-primary" @onclick="AddEventDefinition">Add event definition</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="UpdateEventDefinition">Update event definition</button>
            }
        </div>
    </Loader>
</PropertiesPanel>

@code {
    private LinkViewModel _activeLink;
    [Parameter]
    public LinkViewModel ActiveLink
    {
        get 
        {
            return _activeLink;
        }
        set
        {
            if(_activeLink == value) return;
            _activeLink = value;
            if (jsonEventDefinition != null) Refresh();
        }
    }
    [Parameter] public EventCallback<bool> LinkClosed { get; set; }
    [Parameter] public EventCallback<LinkViewModel> LinkRemoved { get; set; }
    [Parameter] public string Vpn { get; set; } = string.Empty;
    [Inject] private IJSRuntime JS { get; set; } = null!;
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;
    [Inject] private ToastService ToastService { get; set; } = null!;
    private bool IsLoading { get; set; } = true;
    private IJSObjectReference jsonEventDefinition;
    private IJSObjectReference sampleEventDefinition;

    public async void Close()
    {
        await LinkClosed.InvokeAsync(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            SubscribeToAction<AddEventDefResultAction>(async (act) =>
            {
                ToastService.AddInfo("EventDefinition", "Event definition has been created");
                ActiveLink.EventId = act.EventDef.EventDefinitionId;
            });
            SubscribeToAction<GetEventDefResultAction>(async (act) =>
            {
                await jsonEventDefinition.InvokeVoidAsync("setValue", act.EventDef.Result.JsonSchema);
                IsLoading = false;
                StateHasChanged();
            });
            jsonEventDefinition = await JS.InvokeAsync<IJSObjectReference>("initEditor", "jsonEventDefinition", "{}");
            sampleEventDefinition = await JS.InvokeAsync<IJSObjectReference>("initEditor", "sampleEventDefinition", "{}");
            Refresh();
        }
    }

    private async void Remove(MouseEventArgs a)
    {
        await LinkRemoved.InvokeAsync(ActiveLink);
    }

    private async void AddEventDefinition(MouseEventArgs a)
    {
        var jsonSchema = await jsonEventDefinition.InvokeAsync<string>("getValue");
        Dispatcher.Dispatch(new AddEventDefAction 
        { 
            Source = ActiveLink.StartPoint.ApplicationId,
            Target = ActiveLink.EndPoint.ApplicationId,
            Vpn = Vpn, 
            Url = AppState.Value.SelectedNode.Url,
            Port = AppState.Value.SelectedNode.Port,
            JsonSchema = jsonSchema
        });
    }

    private async void UpdateEventDefinition(MouseEventArgs e)
    {
        // TODO
    }

    private async void GenerateSample()
    {
        var jsonSchema = await jsonEventDefinition.InvokeAsync<string>("getValue");
        var sample = JsonSchemaHelper.GenerateSample(jsonSchema);
        await sampleEventDefinition.InvokeVoidAsync("setValue", sample);
    }

    private async void Refresh()
    {
        IsLoading = true;
        if (!string.IsNullOrEmpty(ActiveLink.EventId))
        {
            Dispatcher.Dispatch(new GetEventDefAction
                {
                    Id = ActiveLink.EventId,
                    Vpn = Vpn,
                    Url = AppState.Value.SelectedNode.Url,
                    Port = AppState.Value.SelectedNode.Port
                });
            return;
        }

        IsLoading = false;
    }
}