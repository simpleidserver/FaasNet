@using System.Linq.Expressions
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.RaftConsensus.Client
@typeparam TRowData where TRowData : ISerializable;

@code {
    private SortOrders? _sort;
    private bool _isSortEnabled = false;
    [CascadingParameter]
    public Grid<TRowData> OwnerGrid { get; set; }
    private RenderFragment<TRowData> cellTemplate;
    private Func<TRowData, object> compiledExpression;
    private Expression lastCompiledExpression;

    [Parameter]
    public Expression<Func<TRowData, object>> Expression { get; set; } = null;
    [Parameter]
    public RenderFragment<TRowData> ChildContent { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public bool IsSortEnabled
    {
        get
        {
            return _isSortEnabled;
        }
        set 
        {
            if (_isSortEnabled == value) return;
            _isSortEnabled = value;
            RefreshClassName();
        }
    }
    [Parameter]
    public string Name { get; set; }
    public SortOrders? Sort
    {
        get
        {
            return _sort;
        }
        set
        {
            if (_sort == value) return;
            _sort = value;
            RefreshClassName();
        }
    }
    public string ClassName { get; set; } = string.Empty;

    public void ResetSort()
    {
        Sort = null;
    }

    public void ToggleSort()
    {
        if (Sort == SortOrders.ASC || Sort == null)  Sort = SortOrders.DESC;
        else Sort = SortOrders.ASC;
    }

    protected override void OnInitialized()
    {
        OwnerGrid.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (lastCompiledExpression != Expression)
        {
            compiledExpression = Expression?.Compile();
            lastCompiledExpression = Expression;
        }
    }

    internal RenderFragment<TRowData> CellTemplate
    {
        get
        {
            return cellTemplate ??= (rowData => builder =>
            {
                builder.OpenElement(0, "td");
                if (compiledExpression != null)
                {
                    var value = compiledExpression(rowData);
                    builder.AddContent(1, value);
                }
                else builder.AddContent(2, ChildContent, rowData);
                builder.CloseElement();
            });
        }
    }

    private async void RefreshClassName()
    {
        if (!IsSortEnabled) return;
        if (Sort == null) ClassName = "sorting";
        else if (Sort == SortOrders.ASC) ClassName = "sorting sorting_desc";
        else ClassName = "sorting sorting_asc";
    }
}