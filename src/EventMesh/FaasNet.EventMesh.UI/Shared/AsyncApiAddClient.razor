@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent

<Modal Title="Add Client" @ref=addClientModal>
    <EditForm OnValidSubmit="@HandleValidSubmit" Model="addClient">
        <DataAnnotationsValidator />
        <div class="modal-body">
            <!-- ClientId -->
            <div class="mb-3">
                <label class="form-label">Client Identifier</label>
                <InputText class="form-control" @bind-Value="addClient.ClientId" />
                <ValidationMessage For="() => addClient.ClientId" />
            </div>
            <!-- VPN -->
            <div class="mb-3">
                <label class="form-label">VPN</label>
                <input type="text" value="@addClient.Vpn" class="form-control" disabled />
                <ValidationMessage For="() => addClient.Vpn" />
            </div>
            <!-- Purpose Types -->
            <div class="mb-3">
                <label class="form-label">Types of purpose</label>
                <select class="form-select" @bind="addClient.PurposeTypes" multiple>
                    <option value="0">Publish</option>
                    <option value="1">Subscribe</option>
                </select>
                <ValidationMessage For="() => addClient.PurposeTypes" />
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </EditForm>
</Modal>

@code {
    [Inject] private IDispatcher Dispatcher { get; set; } = null!;
    [Inject] private ToastService ToastService { get; set; } = null!;
    [Inject] private IState<AppState> AppState { get; set; } = null!;
    [Parameter] public EventCallback<AddClientResultAction> ClientAdded { get; set; }
    [Parameter] public string Vpn { get; set; } = null!;
    private AddClientAction addClient { get; set; } = new AddClientAction();
    private Modal addClientModal { get; set; } = null!;

    public void Open(PointViewModel point)
    {
        addClient.CoordinateX = point.X;
        addClient.CoordinateY = point.Y;
        addClientModal.Open();
    }

    public void Close() => addClientModal.Close();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
            addClient.Vpn = Vpn;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<AddClientResultAction>(async (act) =>
        {
            addClientModal.Close();
            ToastService.AddInfo("Client", "Client has been added");
            await ClientAdded.InvokeAsync(act);
            StateHasChanged();
        });
        SubscribeToAction<AddClientFailureAction>((act) =>
        {
            addClientModal.Close();
            ToastService.AddError("Client", act.Message);
            StateHasChanged();
        });
    }

    private void HandleValidSubmit()
    {
        addClient.Url = AppState.Value.SelectedNode.Url;
        addClient.Port = AppState.Value.SelectedNode.Port;
        Dispatcher.Dispatch(addClient);
    }
}