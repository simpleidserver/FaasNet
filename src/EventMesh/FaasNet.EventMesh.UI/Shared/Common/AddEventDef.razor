@inherits FluxorComponent
@using FaasNet.EventMesh.Client.StateMachines
@using FaasNet.EventMesh.Client.StateMachines.Client
@using FaasNet.EventMesh.UI.Helpers
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.EventDef
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using FaasNet.EventMesh.UI.Shared.Components

<EditForm OnValidSubmit="@HandleValidSubmit" Model="addEventDef">
	<DataAnnotationsValidator />
	<!-- Event Definition Identifier -->
	<div class="mb-3">
		<label class="form-label">Event Definition Identifier</label>
		<InputText class="form-control" @bind-Value="addEventDef.Id" />
		<ValidationMessage For="() => addEventDef.Id" />
	</div>
	<!-- VPN -->
	<div class="mb-3">
		<label class="form-label">VPN</label>
		<InputText class="form-control" @bind-Value="addEventDef.Vpn" disabled />
	</div>
	<!-- Topic -->
	<div class="mb-3">
		<label class="form-label">Topic</label>
		<InputText class="form-control" @bind-Value="addEventDef.Topic"/>
		<ValidationMessage For="() => addEventDef.Topic" />
	</div>
	<!-- Description -->
	<div class="mb-3">
		<label class="form-label">Description</label>
		<InputTextArea class="form-control" @bind-Value="addEventDef.Description" />
		<ValidationMessage For="() => addEventDef.Description" />
	</div>
	<!-- Json Schema -->
	<div class="mb-3 row" id="jsonContainer">		
        <div class="col">
            <h6>JSON schema</h6>
            <div id="jsonEventDefinition"></div>
        </div>
        <div class="col">
            <h6>Sample</h6>
            <div id="sampleEventDefinition"></div>
        </div>
	</div>
	<div id="actions">
		<button type="submit" class="btn btn-primary">Add</button>
		<button class="btn btn-primary" @onclick="GenerateSample" @onclick:preventDefault="true">Generate sample</button>
	</div>
</EditForm>

@code {
	public AddEventDefAction addEventDef { get; set; } = new();
	[Parameter] public string Vpn { get; set; }
	[Inject] private IState<AppState> AppState { get; set; } = null!;
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private ToastService ToastService { get; set; } = null!;
	[Inject] private IJSRuntime JS { get; set; } = null!;
	private IJSObjectReference jsonEventDefinition;
	private IJSObjectReference sampleEventDefinition;

	public void Reset() 
	{
		addEventDef.Reset();
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		SubscribeToAction<AddEventDefResultAction>((act) =>
		{
			ToastService.AddInfo("EventDefinition", "Event definition has been added");
			StateHasChanged();
		});
		SubscribeToAction<AddEventDefFailureAction>((act) =>
		{
			ToastService.AddError("EventDefinition", act.Message);
			StateHasChanged();
		});
		addEventDef.Vpn = Vpn;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			jsonEventDefinition = await JS.InvokeAsync<IJSObjectReference>("initEditor", "jsonEventDefinition", "{}", false);
			sampleEventDefinition = await JS.InvokeAsync<IJSObjectReference>("initEditor", "sampleEventDefinition", "{}", false);
		}
	}

	private async void HandleValidSubmit()
	{
		var jsonSchema = await jsonEventDefinition.InvokeAsync<string>("getValue");
		addEventDef.Url = AppState.Value.SelectedNode.Url;
		addEventDef.Port = AppState.Value.SelectedNode.Port;
		addEventDef.JsonSchema = jsonSchema;
		Dispatcher.Dispatch(addEventDef);
	}

	private async void GenerateSample()
	{
		var jsonSchema = await jsonEventDefinition.InvokeAsync<string>("getValue");
		var sample = JsonSchemaHelper.GenerateSample(jsonSchema);
		await sampleEventDefinition.InvokeVoidAsync("setValue", sample);
	}
}