@using FaasNet.EventMesh.UI.Shared.Common
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.ApplicationDomains
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using FaasNet.EventMesh.UI.Shared.Components

@inherits FluxorComponent
<Modal Title="Choose a client" IsFullWidth="true" @ref="panel">
    <div class="apiClient">
        <!-- Add a new client -->
        <div class="card">
            <div class="card-header">
                Add a client
            </div>
            <div class="card-body">
                <AddClient Vpn="@Vpn"></AddClient>
            </div>
        </div>
        <!-- Select an existing client -->
        <div class="card">
            <div class="card-header">
                Select an existing client
            </div>
            <div class="card-body">
                <Clients Vpn="@Vpn" IsSelectionEnabled="true"></Clients>
            </div>
        </div>
        <div>
            <button type="button" class="btn btn-primary" @onclick="HandleConfirm">Confirm</button>
        </div>
    </div>
</Modal>

@code {
    [Parameter] public EventCallback<ClientViewModel> ClientSelected { get; set; }
    [Parameter] public string Vpn { get; set; } = null!;
    [Inject] private IState<ClientState> ClientState { get; set; } = null!;
    public Modal panel;

    public void Open()
    {
        panel.Open();
    }

    public void Close()
    {
        panel.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async void HandleConfirm(MouseEventArgs args)
    {
        var selectedClient = ClientState.Value.Clients.Records.SingleOrDefault(r => r.IsSelected);
        await ClientSelected.InvokeAsync(selectedClient);
    }
}