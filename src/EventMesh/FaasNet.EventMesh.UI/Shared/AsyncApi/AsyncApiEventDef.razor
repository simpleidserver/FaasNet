@using FaasNet.EventMesh.UI.Shared.Common
@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.ApplicationDomains
@using FaasNet.EventMesh.UI.Stores.Client
@using FaasNet.EventMesh.UI.Stores.EventDef
@using Fluxor
@using System.Linq
@using Fluxor.Blazor.Web.Components
@using FaasNet.EventMesh.UI.Shared.Components
@inherits FluxorComponent

<Modal Title="Choose an event" IsFullWidth="true" @ref="evtModal">
    <div class="apiEvent">
        <!-- Add a new event definition -->
        <Card Title="Add an Event definition">
            <Loader IsDisplayed="@EventDefState.Value.IsLoading">
                <AddEventDef Vpn="@Vpn"></AddEventDef>
            </Loader>
        </Card>
        <!-- Event definitions -->
        <Card Title="Select an existing event definition">
            <Loader IsDisplayed="@EventDefState.Value.IsLoading">
                <EventDefs IsSelectionEnabled="true" Vpn="@Vpn"></EventDefs>
            </Loader>
        </Card>
        <div>
            <button type="button" class="btn btn-primary" @onclick="HandleConfirm">Confirm</button>
        </div>
    </div>
</Modal>

@code {
    public Modal evtModal;
    [Inject] private IState<EventDefState> EventDefState { get; set; } = null!;
    [Parameter] public EventCallback<EventDefViewModel> EvtDefSelected { get; set; }
    [Parameter] public string Vpn { get; set; }

    public void Open()
    {
        evtModal.Open();
    }

    public void Close()
    {
        evtModal.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async void HandleConfirm(MouseEventArgs args)
    {
        var selectedEvtDef = EventDefState.Value.EventDefs.Records.Single(e => e.IsSelected);
        await EvtDefSelected.InvokeAsync(selectedEvtDef);
    }
}