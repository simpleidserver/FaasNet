@using FaasNet.EventMesh.UI.Stores.App
@using FaasNet.EventMesh.UI.Stores.Client
@using Fluxor
@using Fluxor.Blazor.Web.Components
@using System.Timers
@inject NavigationManager navigationManager
@inherits FluxorComponent

<nav class="navbar navbar-expand-sm navbar-light flex-shrink-0 bg-light" id="navHeader">
	<div class="container-fluid">
		<a class="navbar-brand" href="#">EventMesh</a>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent">
		  <span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarSupportedContent">
			  <ul class="navbar-nav me-auto mb-2 mb-lg-0">
				<li class="nav-item @GetActive("/overview", NavLinkMatch.All)">
				  <NavLink class="nav-link" href="/overview">Node overview</NavLink>
				</li>
				<li class="nav-item @GetActive("/vpns", NavLinkMatch.All)">
					<NavLink class="nav-link" href="/vpns">Vpns</NavLink>
				</li>
				<li class="nav-item @GetActive("/developertools", NavLinkMatch.All)">
					<NavLink class="nav-link" href="/developertools">Developer tools</NavLink>
				</li>
			</ul>
			  <div class="d-flex" id="selectNode">
				  <button class="btn btn-primary" @onclick="RefreshStatus">Refresh</button>
				  @if (State.Value.IsActive && State.Value.Nodes != null)
				  {
						<div class="col-auto title">
							<span>Active EventMesh node</span>
						</div>
						<select class="form-select" value="@State.Value.SelectedNode?.Id" @onchange="ChangeSelectedNode">
							@foreach (var node in State.Value.Nodes)
							{
								<option value="@node.Id">@node.DisplayName</option>
							}
						</select>
				  }
				  else
				  {
					  <span class="title">There is no running node</span>
				  }
			  </div>
		</div>
	</div>
</nav>

@code {
	[Inject] private IDispatcher Dispatcher { get; set; } = null!;
	[Inject] private IState<AppState> State { get; set; } = null!;
	[Inject] private Store _store { get; set; } = null;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		navigationManager.LocationChanged += (s, e) => StateHasChanged();
		RefreshStatus();
		SubscribeToAction<RefreshStatusResultAction>((act) =>
		{
			if (State.Value.SelectedNode == null && act.Nodes.Any())
				Dispatcher.Dispatch(new SelectActiveNodeAction { Id = act.Nodes.First().Id });
		});
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		_store.InitializeAsync().Wait();
	}

	private void RefreshStatus()
	{
		Dispatcher.Dispatch(new RefreshStatusAction());
	}

	private void ChangeSelectedNode(ChangeEventArgs e) 
	{
		Dispatcher.Dispatch(new SelectActiveNodeAction { Id = e.Value.ToString() });
	}

	string GetActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix) => IsActive(href, navLinkMatch) ? "active" : "";

    bool IsActive(string href, NavLinkMatch navLinkMatch = NavLinkMatch.Prefix)
    {
		var relativePath = navigationManager.ToBaseRelativePath(navigationManager.Uri).ToLower();
        return navLinkMatch == NavLinkMatch.All ? relativePath == href.ToLower() : relativePath.StartsWith(href.ToLower());
    }
}